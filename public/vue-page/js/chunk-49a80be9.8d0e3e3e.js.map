{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.string.split.js","webpack:///./node_modules/core-js/modules/es.string.replace.js","webpack:///./node_modules/core-js/internals/advance-string-index.js","webpack:///./node_modules/core-js/modules/es.array.index-of.js","webpack:///./src/services/teamParser.js"],"names":["fixRegExpWellKnownSymbolLogic","isRegExp","anObject","requireObjectCoercible","speciesConstructor","advanceStringIndex","toLength","callRegExpExec","regexpExec","fails","arrayPush","push","min","Math","MAX_UINT32","SUPPORTS_Y","RegExp","SPLIT","nativeSplit","maybeCallNative","internalSplit","split","length","separator","limit","string","String","this","lim","undefined","call","match","lastIndex","lastLength","output","flags","ignoreCase","multiline","unicode","sticky","lastLastIndex","separatorCopy","source","slice","index","apply","test","O","splitter","regexp","res","done","value","rx","S","C","unicodeMatching","p","q","A","e","z","i","toObject","toInteger","regExpExec","max","floor","SUBSTITUTION_SYMBOLS","SUBSTITUTION_SYMBOLS_NO_NAMED","maybeToString","it","REPLACE","nativeReplace","reason","REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE","REPLACE_KEEPS_$0","UNSAFE_SUBSTITUTE","searchValue","replaceValue","replacer","indexOf","functionalReplace","global","fullUnicode","results","result","matchStr","accumulatedResult","nextSourcePosition","matched","position","captures","j","namedCaptures","groups","replacerArgs","concat","replacement","getSubstitution","str","tailPos","m","symbols","ch","capture","charAt","n","f","module","exports","$","$indexOf","arrayMethodIsStrict","arrayMethodUsesToLength","nativeIndexOf","NEGATIVE_ZERO","STRICT_METHOD","USES_TO_LENGTH","ACCESSORS","1","target","proto","forced","searchElement","arguments","parseAbility","ability","pokemon","startsWith","replace","toLocaleLowerCase","parseLevel","level","Number","parseNameAndItem","part","item","name","nicknamed","includes","parseEvs","evs","spread","label","hp","atk","def","spa","spd","spe","forEach","stat","val","parseIvs","ivs","parseMoves","moves","parseTeam","pokemonTeam","team","pkmn","pokeman","count","nature"],"mappings":"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","file":"js/chunk-49a80be9.8d0e3e3e.js","sourcesContent":["'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar isRegExp = require('../internals/is-regexp');\nvar anObject = require('../internals/an-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar toLength = require('../internals/to-length');\nvar callRegExpExec = require('../internals/regexp-exec-abstract');\nvar regexpExec = require('../internals/regexp-exec');\nvar fails = require('../internals/fails');\n\nvar arrayPush = [].push;\nvar min = Math.min;\nvar MAX_UINT32 = 0xFFFFFFFF;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { return !RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\nfixRegExpWellKnownSymbolLogic('split', 2, function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'.split(/(b)*/)[1] == 'c' ||\n    'test'.split(/(?:)/, -1).length != 4 ||\n    'ab'.split(/(?:ab)*/).length != 2 ||\n    '.'.split(/(.?)(.?)/).length != 4 ||\n    '.'.split(/()()/).length > 1 ||\n    ''.split(/.?/).length\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(requireObjectCoercible(this));\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (separator === undefined) return [string];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) {\n        return nativeSplit.call(string, separator, lim);\n      }\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy.lastIndex;\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));\n          lastLength = match[0].length;\n          lastLastIndex = lastIndex;\n          if (output.length >= lim) break;\n        }\n        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string.length) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output.length > lim ? output.slice(0, lim) : output;\n    };\n  // Chakra, V8\n  } else if ('0'.split(undefined, 0).length) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);\n    };\n  } else internalSplit = nativeSplit;\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = requireObjectCoercible(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== nativeSplit);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n}, !SUPPORTS_Y);\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar toObject = require('../internals/to-object');\nvar toLength = require('../internals/to-length');\nvar toInteger = require('../internals/to-integer');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&'`]|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&'`]|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nfixRegExpWellKnownSymbolLogic('replace', 2, function (REPLACE, nativeReplace, maybeCallNative, reason) {\n  var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;\n  var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;\n  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';\n\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = requireObjectCoercible(this);\n      var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return replacer !== undefined\n        ? replacer.call(searchValue, O, replaceValue)\n        : nativeReplace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      if (\n        (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0) ||\n        (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1)\n      ) {\n        var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);\n        if (res.done) return res.value;\n      }\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n\n        results.push(result);\n        if (!global) break;\n\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n  // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return nativeReplace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n","'use strict';\nvar charAt = require('../internals/string-multibyte').charAt;\n\n// `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? charAt(S, index).length : 1);\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar $indexOf = require('../internals/array-includes').indexOf;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar nativeIndexOf = [].indexOf;\n\nvar NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;\nvar STRICT_METHOD = arrayMethodIsStrict('indexOf');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });\n\n// `Array.prototype.indexOf` method\n// https://tc39.github.io/ecma262/#sec-array.prototype.indexof\n$({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH }, {\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? nativeIndexOf.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","function parseAbility(ability, pokemon) {\n    if (!ability.startsWith(\"Ability:\")) return\n    ability = ability.replace(/\\s/g, \"\").split(\":\")[1].toLocaleLowerCase()\n    pokemon.ability = ability\n}\n\nfunction parseLevel(level, pokemon) {\n    if (!level.startsWith(\"Level:\")) return\n    level = level.replace(/\\s/g, \"\").split(\":\")[1].toLocaleLowerCase()\n    pokemon.level = Number(level)\n}\n\nfunction parseNameAndItem(part, pokemon) {\n    let name = '', item\n    part = part.replace(/\\s/g, \"\").split(\"@\")\n    const nicknamed = part[0].indexOf(\"(\")\n\n    if (nicknamed > -1 && (part[0].slice(nicknamed, nicknamed + 3) !== \"(M)\" && part[0].slice(nicknamed, nicknamed + 3) !== \"(F)\")) {\n        for (let i = nicknamed + 1; i < part[0].indexOf(\")\"); i++) {\n            name += part[0][i].toLocaleLowerCase()\n        }\n    } else {\n        if (part[0].includes(\"(\")) {\n            name = part[0].slice(0, part[0].indexOf(\"(\")).toLocaleLowerCase()\n        } else {\n            name = part[0].toLocaleLowerCase()\n        }\n    }\n\n    if (part[1] === undefined) {\n        item = \"\"\n    } else {\n        item = part[1].toLocaleLowerCase().replace(\"-\", \"\")\n    }\n\n    pokemon.name = name.replace(\"'\", \"\")\n    pokemon.item = item\n}\n\nfunction parseEvs(evs, pokemon) {\n    pokemon.spread = [0, 0, 0, 0, 0, 0]\n    const label = { hp: 0, atk: 1, def: 2, spa: 3, spd: 4, spe: 5 }\n\n    evs = evs.split(\":\")\n    evs[1].split(\" / \").forEach(e => {\n        const stat = e.replace(/[0-9' ']/g, '').toLocaleLowerCase()\n        const val = Number(e.replace(/[^0-9]/g, ''))\n        pokemon.spread[label[stat]] = val\n    })\n}\n\nfunction parseIvs(ivs, pokemon) {\n    pokemon.ivs = [31, 31, 31, 31, 31, 31]\n    const label = { hp: 0, atk: 1, def: 2, spa: 3, spd: 4, spe: 5 }\n\n    ivs = ivs.split(\":\")\n    ivs[1].split(\" / \").forEach(e => {\n        const stat = e.replace(/[0-9' ']/g, '').toLocaleLowerCase()\n        const val = Number(e.replace(/[^0-9]/g, ''))\n        pokemon.ivs[label[stat]] = val\n    })\n}\n\nfunction parseMoves(moves, pokemon) {\n    pokemon.moves = []\n    for (let i = 0; i < moves.length; i++) {\n        const m = moves[i].replace(/[^a-zA-Z]/g, '')\n        if (m !== \"\")\n            pokemon.moves.push(m.toLocaleLowerCase())\n    }\n}\n\nexport const parseTeam = function (pokemonTeam) {\n    let team = []\n    let pkmn = pokemonTeam.split('\\n\\n')\n    for (let i = 0; i < pkmn.length; i++) {\n        let p = {}\n        if (pkmn[i] < 3) {\n            break\n        }\n        const pokeman = pkmn[i].split('\\n')\n        parseNameAndItem(pokeman[0], p)\n        parseAbility(pokeman[1], p)\n        let count = 2\n        \n        \n        if (count < pokeman.length) {\n            if (pokeman[count].startsWith(\"Level:\")){\n                parseLevel(pokeman[count], p)\n                count++\n            }\n        }\n        if (count < pokeman.length) {\n            if (pokeman[count].startsWith(\"Shiny:\")) count++\n        }\n\n        if (count < pokeman.length) {\n            if (pokeman[count].startsWith(\"Happiness:\")) count++\n        }\n\n        if (count < pokeman.length) {\n            if (pokeman[count].startsWith(\"EVs:\")) {\n                parseEvs(pokeman[count], p)\n                count++\n            }\n        }\n        if (count < pokeman.length) {\n            if (pokeman[count].includes(\"Nature\")) {\n                p.nature = pokeman[count].split(\" \")[0].toLocaleLowerCase()\n                count++\n            }\n        }\n\n        if (count < pokeman.length) {\n            if (pokeman[count].startsWith(\"IVs:\")) {\n                parseIvs(pokeman[count], p)\n                count++\n            }\n        }\n\n        parseMoves(pokeman.slice(count, pokeman.length), p)\n        team.push(p)\n    }\n    return team\n}"],"sourceRoot":""}